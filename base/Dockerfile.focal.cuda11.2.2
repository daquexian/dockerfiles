FROM nvidia/cuda:11.2.2-cudnn8-devel-ubuntu20.04
MAINTAINER daquexian

ENV DEBIAN_FRONTEND=noninteractive 

# Uncomment it if you are in China
RUN sed -i 's/security.ubuntu.com/mirrors.ustc.edu.cn/g' /etc/apt/sources.list
RUN sed -i 's/archive.ubuntu.com/mirrors.ustc.edu.cn/g' /etc/apt/sources.list

# Add common tools available in apt repository. We choose not to support python2
RUN apt update && \
    apt -o Acquire::http::proxy=false install -y apt-utils software-properties-common && \
    apt update && \
    apt -o Acquire::http::proxy=false install -y aria2 man telnet locales pkg-config inetutils-ping net-tools git zsh thefuck mc sed ack-grep ranger htop silversearcher-ag python3 python3-dev build-essential autoconf automake libtool make gcc g++ curl wget tar libevent-dev libncurses-dev unzip openjdk-8-jdk colordiff mlocate iftop libpulse-dev libv4l-dev libcurl4-openssl-dev gdb tzdata zip tree sudo libstdc++-10-dev libssl-dev libxxhash-dev zlib1g-dev clang ccache rsync fuse openssh-server netcat libopenblas-dev && \
    apt -o Acquire::http::proxy=false install -o Dpkg::Options::="--force-overwrite" bat ripgrep && \
    apt clean && \
    mkdir /run/sshd

RUN locale-gen "en_US.UTF-8"

RUN bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"

# Install Ninja
RUN wget https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-linux.zip && unzip ninja-linux.zip -d ninja && cp ninja/ninja /usr/bin && rm -rf ninja

# Install pip
RUN curl https://bootstrap.pypa.io/get-pip.py | python3

# Install cmake via pip, install pygments for gtags, pynvim for neovim
RUN pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple cmake pygments pynvim thefuck pylint flake8 autopep8 mypy tagls

# Install mold
RUN git clone https://github.com/rui314/mold.git && \
    cd mold && \
    git checkout v1.2.1 && \
    make -j$(nproc) CXX=clang++-14 && \
    make install && \
    mv /usr/bin/ld /usr/bin/ld.bak && \
    ln -s /usr/local/bin/mold /usr/bin/ld && \
    cd .. && \
    rm -r mold

# RUN git clone https://github.com/MaskRay/ccls --recursive --depth=1 && \
    # mkdir ccls/build && cd ccls/build && CC=clang-8 CXX=clang++-8 cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-16.04/ -GNinja .. && \
    # cmake --build . -- -j`nproc` && \
    # ln -s `pwd`/ccls /usr/bin/ccls

RUN wget https://github.com/neovim/neovim/releases/download/stable/nvim.appimage && chmod +x nvim.appimage && ./nvim.appimage --appimage-extract && chmod 755 -R squashfs-root && rm nvim.appimage && ln -s /squashfs-root/AppRun /usr/bin/nvim

# Install tmux
RUN ["/bin/bash", "-c", "TMUX_VERSION=3.2a &&       \
    wget https://github.com/tmux/tmux/releases/download/${TMUX_VERSION}/tmux-${TMUX_VERSION}.tar.gz &&    \
    mkdir tmux-unzipped &&    \
    tar xf tmux-${TMUX_VERSION}.tar.gz -C tmux-unzipped &&     \
    rm -f tmux-${TMUX_VERSION}.tar.gz &&       \
    pushd tmux-unzipped/tmux-${TMUX_VERSION} &&        \
    ./configure &&     \
    make -j`nproc`&&        \
    make install &&       \
    popd &&        \
    rm -rf tmux-unzipped"]
# -----------

# Install ctags to /usr/local/bin/ctags
RUN ["/bin/bash", "-c", "git clone --depth 1 https://github.com/universal-ctags/ctags.git && \
    pushd ctags && \
    ./autogen.sh  && \
    ./configure && \
    make -j$(nproc) && \
    make install && \
    popd && \
    rm -rf ctags"]

# Install gtags
RUN ["/bin/bash", "-c", "GTAGS_VERSION=6.6.8 &&     \
    wget https://ftp.gnu.org/pub/gnu/global/global-$GTAGS_VERSION.tar.gz &&  \
    mkdir gtags-unzipped && \
    tar xf global-$GTAGS_VERSION.tar.gz -C gtags-unzipped && \
    pushd gtags-unzipped/global-$GTAGS_VERSION &&  \
    ./configure --with-universal-ctags=/usr/local/bin/ctags &&  \
    make && \
    make install && \
    popd && \
    rm -rf gtags-unzipped"]

# Install nodejs
RUN wget install-node.vercel.app/lts -O node.sh && bash node.sh --yes && rm node.sh

# Set timezone
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

RUN echo "export LC_ALL=en_US.UTF-8" >> /etc/zsh/zshenv && echo "export LANG=en_US.UTF-8" >> /etc/zsh/zshenv

COPY imgcat /usr/local/bin/imgcat

ARG DEV_UID

# Add user "dev"
RUN useradd dev -m -u $DEV_UID && echo "dev:dev" | chpasswd && usermod -aG sudo dev

# change shell to zsh for user dev
RUN chsh -s `which zsh` dev

USER dev
WORKDIR /home/dev/

RUN mkdir -p /home/dev/.local/bin

# install hub
RUN wget https://github.com/github/hub/releases/download/v2.14.2/hub-linux-amd64-2.14.2.tgz && tar xvf hub-linux-amd64-2.14.2.tgz && cp hub-linux-amd64-2.14.2/bin/hub /home/dev/.local/bin/ && git config --global hub.protocol ssh && rm -r hub-linux-*

# gtags config
COPY --chown=dev:dev .globalrc /home/dev/
# bat config
COPY --chown=dev:dev bat_config /home/dev/.config/bat/config

# Install yarn
RUN curl -o- -L https://yarnpkg.com/install.sh | bash
ENV PATH="/home/dev/.yarn/bin:${PATH}"

# Install oh-my-zsh
RUN sh -c "$(wget -O- https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"

# Install autosuggestions and syntax-highlighting
RUN git clone --depth 1 https://github.com/zsh-users/zsh-autosuggestions /home/dev/.oh-my-zsh/custom/plugins/zsh-autosuggestions
RUN git clone --depth 1 https://github.com/zsh-users/zsh-syntax-highlighting.git /home/dev/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting

# Add nvim config to share config with vim
RUN mkdir -p /home/dev/.config/nvim/ && \
echo "set runtimepath^=~/.vim runtimepath+=~/.vim/after" >> /home/dev/.config/nvim/init.vim && \
echo "let &packpath=&runtimepath" >> /home/dev/.config/nvim/init.vim && \
echo "source ~/.vimrc" >> /home/dev/.config/nvim/init.vim
# -----------

COPY --chown=dev:dev .gitconfig /home/dev/
COPY --chown=dev:dev .vimrc /home/dev/
COPY --chown=dev:dev .vimrc.local /home/dev/
COPY --chown=dev:dev coc-settings.json /home/dev/.config/nvim/
COPY --chown=dev:dev yank /usr/local/bin/
RUN curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
RUN nvim +'PlugInstall --sync' +qa
RUN nvim +'CocInstall coc-json coc-pyright coc-highlight coc-snippets coc-lists coc-git coc-yank coc-clangd coc-cmake -sync' +qa

RUN git clone --depth 1 https://github.com/gpakosz/.tmux.git /home/dev/.tmux/ &&    \
ln -s /home/dev/.tmux/.tmux.conf /home/dev/.tmux.conf
COPY --chown=dev:dev .tmux.conf.local /home/dev/

# Set PyPI mirror
RUN mkdir -p /home/dev/.config/pip && \
echo "[global]" >> /home/dev/.config/pip/pip.conf && \
echo "index-url = https://mirrors.ustc.edu.cn/pypi/web/simple" >> /home/dev/.config/pip/pip.conf && \
echo "format = columns" >> /home/dev/.config/pip/pip.conf
# -----------

# Copy .zshrc
COPY --chown=dev:dev .zshrc /home/dev/.zshrc
# Install fzf last so that the modified .zsrc will not be overwritted
RUN git clone --depth 1 https://github.com/junegunn/fzf.git /home/dev/.fzf && /home/dev/.fzf/install --key-bindings --completion --update-rc
# -----------

# Copy clangd config.yaml
COPY --chown=dev:dev clangd_config.yaml /home/dev/.config/clangd/config.yaml
# -----------

# Link bat
RUN mkdir -p /home/dev/.local/bin && ln -s /usr/bin/batcat /home/dev/.local/bin/bat

# COPY default_clang_tidy /usr/share/default_clang_tidy
# COPY default_clang_format /usr/share/default_clang_format

CMD ["zsh"]
