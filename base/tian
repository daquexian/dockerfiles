#!/usr/bin/env bash

set -uexo pipefail

# export http_proxy=http://192.168.0.127:1080
# export https_proxy=$http_proxy
# export HTTP_PROXY=$http_proxy
# export HTTPS_PROXY=$http_proxy

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
HM=$SCRIPT_DIR

mkdir -p /run/sshd
dpkg-statoverride --remove /usr/lib/dbus-1.0/dbus-daemon-launch-helper || true

if [ "$SCRIPT_DIR" != "$HOME" ]; then
    cp -r $SCRIPT_DIR/.ssh ~/
    cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
    chmod 600 ~/.ssh/*

    cp -r $SCRIPT_DIR/.config ~/
fi
echo 'set history save on' >> ~/.gdbinit
echo "set history filename $HM/.gdb_history" >> ~/.gdbinit

apt update && \
    apt install -y apt-utils software-properties-common && \
    apt update && \
    apt install -y aria2 man telnet locales pkg-config inetutils-ping net-tools zsh thefuck mc sed ack-grep htop silversearcher-ag python3 python3-dev curl wget tar libevent-dev libncurses-dev unzip colordiff iftop libcurl4-openssl-dev tzdata zip tree sudo libssl-dev libxxhash-dev zlib1g-dev rsync fuse netcat bat ripgrep rlwrap socat && \
    apt clean

locale-gen "en_US.UTF-8"

# wget https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-linux.zip && unzip ninja-linux.zip -d ninja && cp ninja/ninja /usr/bin && rm -rf ninja ninja-linux.zip

# curl https://bootstrap.pypa.io/get-pip.py | python3

pip install -U cmake pygments pynvim thefuck pylint flake8 autopep8 mypy tagls

wget https://github.com/neovim/neovim/releases/download/stable/nvim.appimage && chmod +x nvim.appimage && ./nvim.appimage --appimage-extract && mv squashfs-root /squashfs-root && chmod 755 -R /squashfs-root && rm nvim.appimage && ln -s /squashfs-root/AppRun /usr/local/bin/nvim

TMUX_VERSION=3.2a &&       \
    wget https://github.com/tmux/tmux/releases/download/${TMUX_VERSION}/tmux-${TMUX_VERSION}.tar.gz &&    \
    mkdir tmux-unzipped &&    \
    tar xf tmux-${TMUX_VERSION}.tar.gz -C tmux-unzipped &&     \
    rm -f tmux-${TMUX_VERSION}.tar.gz &&       \
    pushd tmux-unzipped/tmux-${TMUX_VERSION} &&        \
    ./configure &&     \
    make -j`nproc`&&        \
    make install &&       \
    popd &&        \
    rm -rf tmux-unzipped

git clone --depth 1 https://github.com/universal-ctags/ctags.git && \
    pushd ctags && \
    ./autogen.sh  && \
    ./configure && \
    make -j$(nproc) && \
    make install && \
    popd && \
    rm -rf ctags

GTAGS_VERSION=6.6.8 &&     \
    wget https://ftp.gnu.org/pub/gnu/global/global-$GTAGS_VERSION.tar.gz &&  \
    mkdir gtags-unzipped && \
    tar xf global-$GTAGS_VERSION.tar.gz -C gtags-unzipped && \
    pushd gtags-unzipped/global-$GTAGS_VERSION &&  \
    ./configure --with-universal-ctags=/usr/local/bin/ctags &&  \
    make && \
    make install && \
    popd && \
    rm -rf gtags-unzipped global-$GTAGS_VERSION.tar.gz

wget install-node.vercel.app/lts -O node.sh && bash node.sh --yes && rm node.sh

TZ=Asia/Shanghai
ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

echo "export LC_ALL=en_US.UTF-8" >> /etc/zsh/zshenv && echo "export LANG=en_US.UTF-8" >> /etc/zsh/zshenv

mkdir -p $HOME/.local/bin

wget https://github.com/github/hub/releases/download/v2.14.2/hub-linux-amd64-2.14.2.tgz && tar xvf hub-linux-amd64-2.14.2.tgz && cp hub-linux-amd64-2.14.2/bin/hub $HOME/.local/bin/ && git config --global hub.protocol ssh && rm -r hub-linux-*

curl -o- -L https://yarnpkg.com/install.sh | bash

CHSH=no RUNZSH=no sh -c "$(wget -O- https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
git clone --depth 1 https://github.com/zsh-users/zsh-autosuggestions $HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions
git clone --depth 1 https://github.com/zsh-users/zsh-syntax-highlighting.git $HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting

mkdir -p $HOME/.config/nvim/ && \
echo "set runtimepath^=~/.vim runtimepath+=~/.vim/after" >> $HOME/.config/nvim/init.vim && \
echo "let &packpath=&runtimepath" >> $HOME/.config/nvim/init.vim && \
echo "source ~/.vimrc" >> $HOME/.config/nvim/init.vim

git clone --depth 1 https://github.com/gpakosz/.tmux.git $HOME/.tmux/ &&    \
ln -s $HOME/.tmux/.tmux.conf $HOME/.tmux.conf

mv $HOME/.zshrc $HOME/.zshrc.bak
wget https://raw.githubusercontent.com/daquexian/dockerfiles/master/base/.zshrc -O $HOME/.zshrc
echo 'export PATH="$HOME/.yarn/bin:${PATH}"' >> $HOME/.zshrc
echo "export HM=$HM" >> $HOME/.zshrc
echo 'alias h="cd $HM"' >> $HOME/.zshrc
echo 'export HISTFILE=$HM/.zsh_history' >> $HOME/.zshrc

if [ -n "$http_proxy" ]; then
    echo "export http_proxy=$http_proxy" >> $HOME/.zshrc
    echo "export https_proxy=$https_proxy" >> $HOME/.zshrc
    echo "export HTTP_PROXY=$HTTP_PROXY" >> $HOME/.zshrc
    echo "export HTTPS_PROXY=$HTTPS_PROXY" >> $HOME/.zshrc
    echo -e "\nHost github.com\n Hostname ssh.github.com\n Port 443\n" >>~/.ssh/config
    echo -e "\n140.82.113.4 github.com\n" >>/etc/hosts
fi

git clone --depth 1 https://github.com/junegunn/fzf.git $HOME/.fzf && $HOME/.fzf/install --key-bindings --completion --update-rc
wget https://raw.githubusercontent.com/daquexian/dockerfiles/master/base/.tmux.conf.local -O $HOME/.tmux.conf.local
wget https://raw.githubusercontent.com/daquexian/dockerfiles/master/base/.globalrc -O $HOME/.globalrc
wget https://raw.githubusercontent.com/daquexian/dockerfiles/master/base/yank -O /usr/local/bin/yank
chmod +x /usr/local/bin/yank

# only for tianchao
if [[ `basename $0` == 'tian' ]]
then
# for coc installation
export PATH="$HOME/.yarn/bin:${PATH}"

wget https://raw.githubusercontent.com/daquexian/dockerfiles/master/base/.vimrc -O $HOME/.vimrc
wget https://raw.githubusercontent.com/daquexian/dockerfiles/master/base/.vimrc.local -O $HOME/.vimrc.local
wget https://raw.githubusercontent.com/daquexian/dockerfiles/master/base/.gitconfig -O $HOME/.gitconfig
wget https://raw.githubusercontent.com/daquexian/dockerfiles/master/base/.pdbrc -O $HOME/.pdbrc
wget https://raw.githubusercontent.com/daquexian/dockerfiles/master/base/coc-settings.json -O $HOME/coc-settings.json

curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
nvim +'PlugInstall --sync' +qa
nvim +'CocInstall coc-json coc-pyright coc-highlight coc-snippets coc-lists coc-git coc-yank coc-clangd coc-cmake -sync' +qa

echo 'export PYTHONPATH=$PYTHONPATH:/data/user/cangshui/tianchao/repos/megatron-lm' >> ~/.zshrc
fi

